// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/plugins/proto/v1/drain_plugin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DrainService_Init_FullMethodName        = "/api.plugins.proto.v1.DrainService/Init"
	DrainService_IsSupported_FullMethodName = "/api.plugins.proto.v1.DrainService/IsSupported"
	DrainService_IsHealthy_FullMethodName   = "/api.plugins.proto.v1.DrainService/IsHealthy"
	DrainService_IsDrainOk_FullMethodName   = "/api.plugins.proto.v1.DrainService/IsDrainOk"
	DrainService_PreDrain_FullMethodName    = "/api.plugins.proto.v1.DrainService/PreDrain"
	DrainService_PostDrain_FullMethodName   = "/api.plugins.proto.v1.DrainService/PostDrain"
)

// DrainServiceClient is the client API for DrainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrainServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	IsSupported(ctx context.Context, in *IsSupportedRequest, opts ...grpc.CallOption) (*IsSupportedResponse, error)
	IsHealthy(ctx context.Context, in *IsHealthyRequest, opts ...grpc.CallOption) (*IsHealthyResponse, error)
	IsDrainOk(ctx context.Context, in *IsDrainOkRequest, opts ...grpc.CallOption) (*IsDrainOkResponse, error)
	PreDrain(ctx context.Context, in *PreDrainRequest, opts ...grpc.CallOption) (*PreDrainResponse, error)
	PostDrain(ctx context.Context, in *PostDrainRequest, opts ...grpc.CallOption) (*PostDrainResponse, error)
}

type drainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDrainServiceClient(cc grpc.ClientConnInterface) DrainServiceClient {
	return &drainServiceClient{cc}
}

func (c *drainServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, DrainService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainServiceClient) IsSupported(ctx context.Context, in *IsSupportedRequest, opts ...grpc.CallOption) (*IsSupportedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsSupportedResponse)
	err := c.cc.Invoke(ctx, DrainService_IsSupported_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainServiceClient) IsHealthy(ctx context.Context, in *IsHealthyRequest, opts ...grpc.CallOption) (*IsHealthyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsHealthyResponse)
	err := c.cc.Invoke(ctx, DrainService_IsHealthy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainServiceClient) IsDrainOk(ctx context.Context, in *IsDrainOkRequest, opts ...grpc.CallOption) (*IsDrainOkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsDrainOkResponse)
	err := c.cc.Invoke(ctx, DrainService_IsDrainOk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainServiceClient) PreDrain(ctx context.Context, in *PreDrainRequest, opts ...grpc.CallOption) (*PreDrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreDrainResponse)
	err := c.cc.Invoke(ctx, DrainService_PreDrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainServiceClient) PostDrain(ctx context.Context, in *PostDrainRequest, opts ...grpc.CallOption) (*PostDrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDrainResponse)
	err := c.cc.Invoke(ctx, DrainService_PostDrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrainServiceServer is the server API for DrainService service.
// All implementations should embed UnimplementedDrainServiceServer
// for forward compatibility.
type DrainServiceServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	IsSupported(context.Context, *IsSupportedRequest) (*IsSupportedResponse, error)
	IsHealthy(context.Context, *IsHealthyRequest) (*IsHealthyResponse, error)
	IsDrainOk(context.Context, *IsDrainOkRequest) (*IsDrainOkResponse, error)
	PreDrain(context.Context, *PreDrainRequest) (*PreDrainResponse, error)
	PostDrain(context.Context, *PostDrainRequest) (*PostDrainResponse, error)
}

// UnimplementedDrainServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDrainServiceServer struct{}

func (UnimplementedDrainServiceServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDrainServiceServer) IsSupported(context.Context, *IsSupportedRequest) (*IsSupportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSupported not implemented")
}
func (UnimplementedDrainServiceServer) IsHealthy(context.Context, *IsHealthyRequest) (*IsHealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHealthy not implemented")
}
func (UnimplementedDrainServiceServer) IsDrainOk(context.Context, *IsDrainOkRequest) (*IsDrainOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDrainOk not implemented")
}
func (UnimplementedDrainServiceServer) PreDrain(context.Context, *PreDrainRequest) (*PreDrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreDrain not implemented")
}
func (UnimplementedDrainServiceServer) PostDrain(context.Context, *PostDrainRequest) (*PostDrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDrain not implemented")
}
func (UnimplementedDrainServiceServer) testEmbeddedByValue() {}

// UnsafeDrainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrainServiceServer will
// result in compilation errors.
type UnsafeDrainServiceServer interface {
	mustEmbedUnimplementedDrainServiceServer()
}

func RegisterDrainServiceServer(s grpc.ServiceRegistrar, srv DrainServiceServer) {
	// If the following call pancis, it indicates UnimplementedDrainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DrainService_ServiceDesc, srv)
}

func _DrainService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainService_IsSupported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSupportedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).IsSupported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_IsSupported_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).IsSupported(ctx, req.(*IsSupportedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainService_IsHealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).IsHealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_IsHealthy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).IsHealthy(ctx, req.(*IsHealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainService_IsDrainOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDrainOkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).IsDrainOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_IsDrainOk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).IsDrainOk(ctx, req.(*IsDrainOkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainService_PreDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).PreDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_PreDrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).PreDrain(ctx, req.(*PreDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainService_PostDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainServiceServer).PostDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrainService_PostDrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainServiceServer).PostDrain(ctx, req.(*PostDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrainService_ServiceDesc is the grpc.ServiceDesc for DrainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.plugins.proto.v1.DrainService",
	HandlerType: (*DrainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _DrainService_Init_Handler,
		},
		{
			MethodName: "IsSupported",
			Handler:    _DrainService_IsSupported_Handler,
		},
		{
			MethodName: "IsHealthy",
			Handler:    _DrainService_IsHealthy_Handler,
		},
		{
			MethodName: "IsDrainOk",
			Handler:    _DrainService_IsDrainOk_Handler,
		},
		{
			MethodName: "PreDrain",
			Handler:    _DrainService_PreDrain_Handler,
		},
		{
			MethodName: "PostDrain",
			Handler:    _DrainService_PostDrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/plugins/proto/v1/drain_plugin.proto",
}
