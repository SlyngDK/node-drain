apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodedrain-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
    control-plane: controller-manager
spec:
  replicas:  {{ .Values.controllerManager.replicas }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
        {{- if eq (include "chart.hasConfig" .) "true" }}
        checksum/config: {{ include (print $.Template.BasePath "/manager/config.yaml") . | sha256sum }}
        {{- end }}
      labels:
        {{- include "chart.labels" . | nindent 8 }}
        control-plane: controller-manager
        {{- if and .Values.controllerManager.pod .Values.controllerManager.pod.labels }}
        {{- range $key, $value := .Values.controllerManager.pod.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
        {{- end }}
    spec:
      {{- if gt (len .Values.plugins) 0 }}
      initContainers:
        {{- range .Values.plugins }}
        - name: {{ required "Name is required" .name }}
          image: {{ required "Image is required" .image }}
          imagePullPolicy: {{ .imagePullPolicy | default "IfNotPresent" }}
          {{- if .command }}
          command: {{ .command }}
          {{- end }}
          {{- if .args }}
          args: {{ .args }}
          {{- end }}
          volumeMounts:
            - name: plugins
              readOnly: false
              mountPath: /plugins
        {{- end }}
      {{- end }}
      containers:
        - name: manager
          args:
            {{- range .Values.controllerManager.container.args }}
            - {{ . }}
            {{- end }}
          command:
            - /manager
          image: {{ include "controllerManager.image" . }}
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          {{- if .Values.controllerManager.container.env }}
            {{- range $key, $value := .Values.controllerManager.container.env }}
            - name: {{ $key }}
              value: {{ $value }}
            {{- end }}
          {{- end }}
          livenessProbe:
            {{- toYaml .Values.controllerManager.container.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.controllerManager.container.readinessProbe | nindent 12 }}
          {{- if .Values.webhook.enable }}
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          {{- end }}
          resources:
            {{- toYaml .Values.controllerManager.container.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.controllerManager.container.securityContext | nindent 12 }}
          {{- if and .Values.certmanager.enable (or .Values.webhook.enable .Values.metrics.enable) }}
          volumeMounts:
            - name: config
              readOnly: true
              mountPath: /config
            - name: plugins
              readOnly: false
              mountPath: /plugins
            {{- if and .Values.webhook.enable .Values.certmanager.enable }}
            - name: webhook-cert
              mountPath: /tmp/k8s-webhook-server/serving-certs
              readOnly: true
            {{- end }}
            {{- if and .Values.metrics.enable .Values.certmanager.enable }}
            - name: metrics-certs
              mountPath: /tmp/k8s-metrics-server/metrics-certs
              readOnly: true
            {{- end }}
          {{- end }}
      securityContext:
        {{- toYaml .Values.controllerManager.securityContext | nindent 8 }}
      serviceAccountName: {{ .Values.controllerManager.serviceAccountName }}
      terminationGracePeriodSeconds: {{ .Values.controllerManager.terminationGracePeriodSeconds }}
      {{- if and .Values.certmanager.enable (or .Values.webhook.enable .Values.metrics.enable) }}
      volumes:
        {{- if eq (include "chart.hasConfig" .) "true" }}
        - name: config
          secret:
            secretName: nodedrain-controller-manager-config
        {{- else }}
        - name: config
          secret:
            secretName: nodedrain-config
            optional: true
        {{- end }}
        - name: plugins
          emptyDir:
            sizeLimit: 1G
        {{- if and .Values.webhook.enable .Values.certmanager.enable }}
        - name: webhook-cert
          secret:
            secretName: webhook-server-cert
        {{- end }}
        {{- if and .Values.metrics.enable .Values.certmanager.enable }}
        - name: metrics-certs
          secret:
            secretName: metrics-server-cert
        {{- end }}
      {{- end }}
